# Attemps: 1
# Explanation (Backtracking, DP, DFS on decision tree)
# 2 Options for each iteration: We can add the next element on its own or we can add it to the last
# Can only add element on its own if the last element was a palindrome to make sure each element is a palindrome

class Solution:
    def partition(self, s: str) -> List[List[str]]:

        subs = []

        def checkPalindrome(st: str):
            Lp = 0
            Rp = len(st) - 1

            while Lp <= Rp:
                if st[Lp] != st[Rp]:
                    return False
                Lp += 1
                Rp -= 1
            return True

        def partitions(i: int, arr: List[str]):

            if checkPalindrome(arr[-1]):
                if i == len(s) - 1:
                    subs.append(arr)
                    return
                
                new = arr.copy()
                new.append(s[i+1])
                partitions(i+1, new)

            if i == len(s) - 1:
                return
    
            arr[-1] += s[i+1]
            partitions(i+1, arr)

        if len(s) != 0:
            partitions(0, [s[0]])
    
        return subs
